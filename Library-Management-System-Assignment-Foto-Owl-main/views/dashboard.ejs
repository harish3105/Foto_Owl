<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Library Management System - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="#">Library Management System</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="#" data-page="books">Books</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="requests">Borrow Requests</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="history">History</a>
                    </li>
                </ul>
                <button class="btn btn-light" onclick="logout()">Logout</button>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- Books Section -->
        <div id="booksSection" class="section">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Books</h2>
                <div class="d-flex gap-2">
                    <input type="text" class="form-control" id="searchBook" placeholder="Search books...">
                    <button class="btn btn-primary" onclick="searchBooks()">Search</button>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Author</th>
                            <th>Quantity</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="booksTableBody"></tbody>
                </table>
            </div>
        </div>

        <!-- Borrow Requests Section -->
        <div id="requestsSection" class="section d-none">
            <h2>Borrow Requests</h2>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Book</th>
                            <th>User</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="requestsTableBody"></tbody>
                </table>
            </div>
        </div>

        <!-- History Section -->
        <div id="historySection" class="section d-none">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Borrow History</h2>
                <button class="btn btn-success" onclick="exportHistory()">Export to CSV</button>
            </div>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Book</th>
                            <th>Borrowed On</th>
                            <th>Returned On</th>
                        </tr>
                    </thead>
                    <tbody id="historyTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentUser = null;

        // Navigation
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = e.target.dataset.page;
                showSection(page);
            });
        });

        function showSection(sectionName) {
            document.querySelectorAll('.section').forEach(section => {
                section.classList.add('d-none');
            });
            document.getElementById(`${sectionName}Section`).classList.remove('d-none');
            
            // Load section data
            if (sectionName === 'books') loadBooks();
            else if (sectionName === 'requests') loadRequests();
            else if (sectionName === 'history') loadHistory();
        }

        // API Calls
        async function fetchWithAuth(url, options = {}) {
            const token = localStorage.getItem('token');
            return fetch(url, {
                ...options,
                headers: {
                    ...options.headers,
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
        }

        async function loadBooks() {
            try {
                const response = await fetchWithAuth('/api/books');
                const books = await response.json();
                displayBooks(books);
            } catch (error) {
                console.error('Error loading books:', error);
            }
        }

        async function loadRequests() {
            try {
                const response = await fetchWithAuth('/api/borrow-requests');
                const requests = await response.json();
                displayRequests(requests);
            } catch (error) {
                console.error('Error loading requests:', error);
            }
        }

        async function loadHistory() {
            try {
                const response = await fetchWithAuth('/api/users/me/history');
                const history = await response.json();
                displayHistory(history);
            } catch (error) {
                console.error('Error loading history:', error);
            }
        }

        // Display Functions
        function displayBooks(books) {
            const tbody = document.getElementById('booksTableBody');
            tbody.innerHTML = books.map(book => `
                <tr>
                    <td>${book.title}</td>
                    <td>${book.author}</td>
                    <td>${book.quantity}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="borrowBook(${book.id})">
                            Borrow
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function displayRequests(requests) {
            const tbody = document.getElementById('requestsTableBody');
            tbody.innerHTML = requests.map(request => `
                <tr>
                    <td>${request.book_title}</td>
                    <td>${request.user_email}</td>
                    <td>${request.start_date}</td>
                    <td>${request.end_date}</td>
                    <td>${request.status}</td>
                    <td>
                        ${request.status === 'pending' ? `
                            <button class="btn btn-sm btn-success" onclick="updateRequest(${request.id}, 'approve')">
                                Approve
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="updateRequest(${request.id}, 'deny')">
                                Deny
                            </button>
                        ` : ''}
                    </td>
                </tr>
            `).join('');
        }

        function displayHistory(history) {
            const tbody = document.getElementById('historyTableBody');
            tbody.innerHTML = history.map(item => `
                <tr>
                    <td>${item.book_title}</td>
                    <td>${new Date(item.borrowed_on).toLocaleDateString()}</td>
                    <td>${item.returned_on ? new Date(item.returned_on).toLocaleDateString() : 'Not returned'}</td>
                </tr>
            `).join('');
        }

        // Actions
        async function borrowBook(bookId) {
            try {
                const startDate = new Date().toISOString().split('T')[0];
                const endDate = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
                
                const response = await fetchWithAuth('/api/borrow-requests', {
                    method: 'POST',
                    body: JSON.stringify({ bookId, startDate, endDate })
                });

                if (response.ok) {
                    alert('Borrow request submitted successfully');
                    loadBooks();
                } else {
                    const data = await response.json();
                    alert(data.message || 'Failed to submit borrow request');
                }
            } catch (error) {
                console.error('Error borrowing book:', error);
            }
        }

        async function updateRequest(requestId, action) {
            try {
                const response = await fetchWithAuth(`/api/borrow-requests/${requestId}/${action}`, {
                    method: 'PUT'
                });

                if (response.ok) {
                    alert(`Request ${action}ed successfully`);
                    loadRequests();
                } else {
                    const data = await response.json();
                    alert(data.message || `Failed to ${action} request`);
                }
            } catch (error) {
                console.error('Error updating request:', error);
            }
        }

        async function exportHistory() {
            try {
                const response = await fetchWithAuth('/api/borrow-requests/export-history');
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'borrow_history.csv';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                } else {
                    alert('Failed to export history');
                }
            } catch (error) {
                console.error('Error exporting history:', error);
            }
        }

        function logout() {
            localStorage.removeItem('token');
            window.location.href = '/login';
        }

        // Initial load
        loadBooks();
    </script>
</body>
</html>
